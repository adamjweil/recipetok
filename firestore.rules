rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default rule - deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if true;  // Anyone can read user profiles
      allow write: if request.auth != null && (
        request.auth.uid == userId ||  // User can edit their own profile
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['followers', 'following'])  // Allow updates to followers/following arrays
      );
      
      // Add rules for likes subcollection
      match /likes/{videoId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }

      match /commentLikes/{commentId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }

      match /views/{videoId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Videos collection rules
    match /videos/{videoId} {
      allow read: if true;  // Anyone can read videos
      allow create: if request.auth != null;  // Authenticated users can create videos
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||  // Video owner can update
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['likes', 'views']));  // Allow updates to likes and views
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;  // Only video owner can delete

      // Add this inside the videos/{videoId} match block
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && 
          request.auth.uid == resource.data.userId;
      }
    }
  }
}