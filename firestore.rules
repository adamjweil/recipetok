rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Default rule - deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        isOwner(userId) || 
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['followers', 'following'])
        )
      );
      allow delete: if isSignedIn() && isOwner(userId);
      
      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read: if isSignedIn() && isOwner(userId);
        allow write: if isSignedIn();  // Allow any signed-in user to create notifications
        allow delete: if isSignedIn() && isOwner(userId);
      }

      // Pokes subcollection
      match /pokes/{pokeId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && (
          // Allow users to create pokes if:
          // 1. They are authenticated
          // 2. They are setting themselves as the fromUserId
          // 3. They are following the target user
          request.auth.uid == request.resource.data.fromUserId &&
          exists(/databases/$(database)/documents/users/$(request.auth.uid)/following/$(userId))
        );
        allow delete: if false;  // Pokes can't be deleted (they expire naturally)
      }

      // Following and followers subcollections
      match /following/{followedUserId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && request.auth.uid == userId;
      }
      
      match /followers/{followerUserId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn();  // Allow any signed-in user to follow
      }

      // Video likes and bookmarks subcollections
      match /videoLikes/{videoId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && request.auth.uid == userId;
      }
      
      match /bookmarks/{videoId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && request.auth.uid == userId;
      }

      // Comment likes subcollection
      match /commentLikes/{commentId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && request.auth.uid == userId;
      }
    }

    // Videos collection rules
    match /videos/{videoId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.userId || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['tryLaterBy', 'likes', 'likedBy', 'views', 'commentCount'])
      );
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn();
      }

      // Likes subcollection
      match /likes/{userId} {
        allow read: if isSignedIn();
        allow create, delete: if isSignedIn() && userId == request.auth.uid;
      }
    }

    // Meal posts collection rules
    match /meal_posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && (
        request.resource.data.userId == request.auth.uid && 
        request.resource.data.keys().hasAll(['userId', 'title', 'photoUrls', 'mealType', 'isPublic', 'createdAt'])
      );
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.userId || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy', 'likesCount', 'commentsCount'])
      );
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      
      // Likes subcollection
      match /likes/{userId} {
        allow read: if isSignedIn();
        allow create, delete: if isSignedIn() && userId == request.auth.uid;
        allow update: if isSignedIn() && userId == request.auth.uid;
      }
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && (
          request.auth.uid == resource.data.userId || 
          request.auth.uid == get(/databases/$(database)/documents/meal_posts/$(postId)).data.userId
        );
      }
    }

    // Helper functions at the top
    function onlyUpdatingAllowedFields() {
      let allowedFields = ['views', 'likes', 'likesCount', 'commentCount'];
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }
  }
}