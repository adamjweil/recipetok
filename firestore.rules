rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function hasParticipantAccess(conversationId) {
      let conversationDoc = getAfter(/databases/$(database)/documents/conversations/$(conversationId));
      return isSignedIn() && 
             conversationDoc != null && 
             request.auth.uid in conversationDoc.data.participants;
    }

    // Only allow updates to specific fields
    function onlyUpdatingAllowedFields() {
      let allowedFields = ['views', 'likes', 'likesCount', 'commentCount'];
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }

    // Default rule - deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        isOwner(userId) || 
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['followers', 'following'])
        )
      );
      
      // Allow access to all subcollections under user document
      match /{subcollection}/{docId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && request.auth.uid == userId;
      }

      // Explicitly allow videoLikes and bookmarks subcollections
      match /videoLikes/{videoId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && request.auth.uid == userId;
      }
      
      match /bookmarks/{videoId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && request.auth.uid == userId;
      }
    }

    // Videos collection rules
    match /videos/{videoId} {
      allow read: if request.auth != null;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.userId || 
        onlyUpdatingAllowedFields()
      );
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;

      // Allow access to video subcollections (comments, etc)
      match /{subcollection}/{docId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn();
      }
    }

    // Add rules for groups subcollection
    match /users/{userId}/groups/{groupId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Add rules for stories collection
    match /stories/{storyId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      
      match /views/{viewId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
    }

    // Conversation rules
    match /conversations/{conversationId} {
      allow read: if isSignedIn() && 
                 (resource == null || 
                  request.auth.uid in resource.data.participants);
      
      allow create: if isSignedIn() && 
                   request.auth.uid in request.resource.data.participants;
      
      allow update, delete: if isSignedIn() && 
                           request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, write, delete: if hasParticipantAccess(conversationId);
      }
    }

    // User's unread messages counter
    match /users/{userId}/unreadMessages/{conversationId} {
      allow read: if isOwner(userId);
      allow write, delete: if isSignedIn() && 
                          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
  }
}